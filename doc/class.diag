@startuml

class Client {
+Client()
-id
-nom
-prenom
-adresse
}

class Commande {
+Commande()
-id
-reduction
-fraixdeport
-prixtotal

}

class Article {
+Article()
-prixPublique
-cout
}


class Boutique{
-coutFixe
-coutMobile
<<static>> +main(String[] args)
}

class Lot{
+Lot()
-type
-nbArticle
-reduction
-articles
}
interface Objet{
-nom
-reference
-marque
-prix
}

class Stylo{
+Stylo()
-typeEncre
}

class Ramette{
-dimensionL
-dimensionH
}

class "<< singleton >>\nArticleFactory"{
+creerArticle(TypeArticle)
-ArticleFactory()
+getInstance()
}


class Stock{
-quantite
}

class "<< singleton >>\nBaseDonnee"{
-BaseDonnee()
+getInstance()
+getAll()
-getCommandeBoutique()
-getCommandeClient()
-getClient()
-getStock()
+addClient()
+addCommande()
+modifierStock()
-clients
-commandes
-stocks

}
class Interpreteur{
+Interpreter(String s)
}

class Afficheur{
+afficherClient()
+afficherCommande()
+afficherStock()
+afficherBoutique()
}




"<< singleton >>\nBaseDonnee" .left.> Client : << uses >>
"<< singleton >>\nBaseDonnee" .down.> Commande : << uses >>
Client "1" -- "1..*" Commande 
Article -|> Objet
Lot -|> Objet
Lot --* "2..*" Article
Stylo -up-|> Article
Ramette -up-|> Article
Objet "1..*" *-- Commande
"<< singleton >>\nArticleFactory" .up.> Article : "<< create >>"

Boutique "0..*" -right-  Article
(Boutique, Article) .. Stock
"<< singleton >>\nBaseDonnee" .up.> "<< singleton >>\nArticleFactory" : "<< uses >>"
Boutique ..> Interpreteur : << uses >>
Interpreteur .right.> "<< singleton >>\nBaseDonnee" : << uses >>
Interpreteur .left.> Afficheur : << uses >>
@enduml