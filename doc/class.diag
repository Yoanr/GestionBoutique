@startuml

database "DonneeConteneur(xml)" as DonneeConteneur {
}

enum Couleur{
+ROUGE
+BLEU
+VERT
+JAUNE
+NOIR
}

class Client {
+Client(nom : String, prenom : String, adresse : String)
-{static} cptId
-id : int
-nom : String
-prenom : String
-adresse : String
+toString() : String

}

class Commande {
+Commande(nomClient : String, date : String, obj : ObjetVendable, quantite : int )
-id : int 
-{static} cptId
-ligne : LigneDeCommande[]
-date : String
-reduction : doule
-fraixdeport : double
-prixtotal : double
+ajoutObjet(obj : ObjetVendable, quantite : int)
+removeLigne(reference : String)
+addLigne(ligne : LigneDeCommande)
+updatePrix();
+toString() : String
}

class LigneDeCommande{
+LigneDeCommande(obj : ObjetVendable, quantite : int)
-quantite : int
-prixLigne : double

}


class Article {
+Article(nom : String, reference : String, marque : String, prixUnitaire : double)
-{abtract} calculCoutObtention() : double
-prixPublique : double
-coutObtention : double
}


class Main{
<<static>> +main(String[] args)
}

class Lot{
+Lot(article : Article, reference : String)
-type : Article
-nbArticle : int
-reduction : double
-articles : Article[]
+addArticle(article : Article)
+removeArticle(reference : String)
-updatePrix()
toString() : String
}

abstract class ObjetVendable{
#nom : String
#reference : String
#marque : String
#prix : double
+ObjetVendable(nom : String, reference : String )

}



class Stylo{
+Stylo(nom : String, ref : String, marque : String, prixUnitaire : double)
+Stylo(nom : String, ref : String, marque : String, prixUnitaire : double, couleur : Couleur)
-{enum} couleur : Couleur
}

class Ramette{
-grammage : String
-dimensionL : int
-dimensionH : int
-{abtract} calculCoutObtention() : double
}

class "<< singleton >>\nArticleFactory" as ArticleFactory{
-instance
+creerArticle(TypeArticle)
-ArticleFactory()
+getInstance()
}



class "<< singleton >>\nBoutique" as Boutique{
-Boutique()
+getInstance()
-clients : Client[]
-commandes : Commande[]
-stocks : map[Article,quantite]

-LOYER
-SALAIRE
-CHARGE
-ca
-benefice

+getCommandesBoutique() : Commande[]
+getCommandesClient() : Commande[]
+getClients() : Client[]
+getStock() : map[Article,quantite]
+addClient() 
+addCommande()
+modifierStock()
+getBoutiqueInfo() : String

}
class Controlleur{
+Controlleur(String s)
}

Interface Affichage{
+afficherClient()
+afficherCommande()
+afficherStock()
+afficherBoutique()
}

class VueGraphique{
}
class VueTerminal{
+afficherMenu()
}


class DonneeManager{
+lire()
+ecrire()
}





Client "1" --* "1..*" Commande 
Article  -up-|> ObjetVendable
Lot -up-|> ObjetVendable
Lot "0..*" --* "2..*" Article
Stylo -up-|> Article
Couleur -down- Stylo
Ramette -up-|> Article
Commande "1" +..* "1..*" LigneDeCommande
LigneDeCommande "0..*" -->  "1" ObjetVendable

ArticleFactory ..> Article : "<< create >>"

Boutique "1" --> "1" ArticleFactory : "<< use >>"
Boutique "1" ..> "1" DonneeManager :  "<< use >>"

Boutique "1"  --> "0..*"  Article : "stock"
Boutique "1" -up-> "0..*" Client 
Boutique "1" --> "0..*" Commande 


DonneeManager ..> DonneeConteneur : << read >>

Controlleur "1" --> "1" Boutique : << use >>

Controlleur "1" .up.> "1" VueTerminal : << use >>
Controlleur "1" .up.> "1" VueGraphique : << use >>
 javaFX ()-- VueGraphique

VueTerminal -up|> Affichage
VueGraphique -up|> Affichage


Main .right.> Controlleur : << use >>
@enduml